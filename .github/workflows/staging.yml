name: QA deployment

on:
  push:
    branches:
      - "master"
    paths:
      - "**.js*"
      - "**.ts*"
      - "package*.json"
      - "Dockerfile"
      - "entrypoint.sh"
      - ".github/workflows/staging.yml"

env:
  # Deployment variables
  PROJECT_NAME: do-fuels-api
  GAR_BASE: us-docker.pkg.dev/${{ secrets.GCP_PROJECT }}
  SKIP_PREFLIGHT_CHECK: true
  DISABLE_ESLINT_PLUGIN: true
  NODE_ENV: production

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: ["14"]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - run: yarn install --frozen-lockfile
        env:
          NODE_ENV: development
      - run: yarn test

  build:
    needs: ["test"]
    runs-on: ubuntu-latest

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      ### Build the Docker image and Push it
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}-${{ env.GITHUB_SHA_SHORT }}

      - name: Login to GAR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GAR_BASE}}
          username: _json_key
          password: ${{ secrets.GAR_JSON_KEY }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          target: release
          tags: ${{ env.GAR_BASE }}/${{env.PROJECT_NAME}}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
            SKIP_PREFLIGHT_CHECK=${{ env.SKIP_PREFLIGHT_CHECK }}
            DISABLE_ESLINT_PLUGIN=${{ env.DISABLE_ESLINT_PLUGIN }}
          push: true
          cache-from: type=registry,ref=${{ env.GAR_BASE }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    needs: ["build"]
    runs-on: ubuntu-latest

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - id: deploy
        uses: google-github-actions/deploy-cloudrun@main
        with:
          image: ${{ env.GAR_BASE}}/${{env.PROJECT_NAME}}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          service: ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}-${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          credentials: ${{ secrets.GAR_JSON_KEY }}
          region: ${{ secrets.GCP_REGION }}
          flags: |
            --vpc-connector=projects/${{ secrets.GCP_PROJECT }}/locations/${{ secrets.GCP_REGION }}/connectors/${{ secrets.GCP_REGION }}
          env_vars: |
            NODE_ENV=${{ env.NODE_ENV }},
            DB_HOST=${{ secrets.DB_HOST }},
            DB_PORT=${{ secrets.DB_PORT }},
            DB_USER=${{ secrets.DB_USER }},
            DB_PASSWORD=${{ secrets.DB_PASSWORD }},
            DB_NAME=${{ secrets.DB_NAME }},
            API_VERSION=${{ secrets.STAGING_API_VERSION }},
            DEFAULT_PAGINATION_RESPONSE=${{secrets.DEFAULT_PAGINATION_RESPONSE}}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GAR_JSON_KEY }}
          export_default_credentials: true

      - name: Allow unauthenticated calls to the service
        run: |
          gcloud run services add-iam-policy-binding ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}-${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }} \
          --region=${{ secrets.GCP_REGION }} --member=allUsers --role=roles/run.invoker

      # Example of using the output
      - id: test
        run: curl "${{ steps.deploy.outputs.url }}"
