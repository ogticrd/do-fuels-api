name: Prod deployment

on:
  release:
    types:
      - published

env:
  # Deployment variables
  PROJECT_NAME: do-fuels-api
  GAR_BASE: us-docker.pkg.dev/${{ secrets.GCP_PROJECT }}
  NODE_ENV: production

jobs:
  versioning:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.set.outputs.version }}
    steps:
      - name: Getting API Version
        id: get
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            return context.payload.release.tag_name.substring(0,2)
      - name: Setting API Version
        id: set
        run: echo "::set-output name=version::${{ steps.get.outputs.result }}"

  build:
    needs: ["versioning"]
    runs-on: ubuntu-latest

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      ### Build the Docker image and Push it
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}-${{ env.GITHUB_SHA_SHORT }}

      - name: Login to GAR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GAR_BASE}}
          username: _json_key
          password: ${{ secrets.GAR_JSON_KEY }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          target: release
          tags: ${{ env.GAR_BASE }}/${{env.PROJECT_NAME}}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
            SKIP_PREFLIGHT_CHECK=true
            DISABLE_ESLINT_PLUGIN=false
          push: true
          cache-from: type=registry,ref=${{ env.GAR_BASE }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    needs: ["build", "versioning"]
    runs-on: ubuntu-latest

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - id: deploy
        uses: google-github-actions/deploy-cloudrun@main
        with:
          image: ${{ env.GAR_BASE}}/${{env.PROJECT_NAME}}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}:${{ env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          service: ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}-${{ needs.versioning.outputs.version }}
          credentials: ${{ secrets.GAR_JSON_KEY }}
          region: ${{ secrets.GCP_REGION }}
          flags: |
            --vpc-connector=projects/${{ secrets.GCP_PROJECT }}/locations/${{ secrets.GCP_REGION }}/connectors/${{ secrets.GCP_REGION }}
          env_vars: |
            NODE_ENV=${{ env.NODE_ENV }},
            DB_HOST=${{ secrets.DB_HOST }},
            DB_PORT=${{ secrets.DB_PORT }},
            DB_USER=${{ secrets.DB_USER }},
            DB_PASSWORD=${{ secrets.DB_PASSWORD }},
            DB_NAME=${{ secrets.DB_NAME }},
            API_VERSION=${{ needs.versioning.outputs.api_version }},
            DEFAULT_PAGINATION_RESPONSE=${{secrets.DEFAULT_PAGINATION_RESPONSE}}

      - name: Testing Service with curl
        run: curl "${{ steps.deploy.outputs.url }}"
